class Grid
  @@grid = [[".", ".", "."],[".", ".", "."],[".", ".", "."]]
  @@counter = 0
  @@turn = 0

  def initialize(form)
    @form = form.upcase
  end

  private
  def printer
    @@grid.each_with_index do |row, i|
      print "\t"
    print row.join("\t")
    puts
    end
  end

  private
  def check_condition
    #This is to kept the vertical lines
    if @@grid[0] == ["X", "X", "X"] || @@grid[1] == ["X", "X", "X"] || @@grid[2] == ["X", "X", "X"] || 
      #This is to kept the vertical lines
      @@grid[0][0] == "X" && @@grid[1][0] == "X" && @@grid[2][0] == "X" ||
      @@grid[0][1] == "X" && @@grid[1][1] == "X" && @@grid[2][1] == "X" ||
      @@grid[0][2] == "X" && @@grid[1][2] == "X" && @@grid[2][2] == "X" ||
      #This is for diagonal codes
      @@grid[0][0] == "X" && @@grid[1][1] == "X" && @@grid[2][2] == "X" ||
      @@grid[0][2] == "X" && @@grid[1][1] == "X" && @@grid[2][0] == "X" 

      puts "you re winner trophy.jpg"
      @@counter += 1
    elsif @@turn == 9
      puts "DRAW , nobody wins"
      @@counter += 1
    end
  end
  
  private
  def modifier
    puts "put a number for the first"
    num1 = gets
    puts "put a number for the second"
    num2 = gets
    @@grid[num1.to_i][num2.to_i]= "X"
    printer
    @@turn +=1
    puts "Your move this turn is above and the cpu move is below TURN:#{@@turn}"
  end
  
  private
  def computer
    number = 0
    while number < 1
      num1 = rand(3)
      num2 = rand(3)
      if @@grid[num1][num2] != "X"
        if @@grid[num1][num2] != "O"
          @@grid[num1][num2]="O"
          puts "CPU IS MOVING AT #{num1} AND #{num2}"
          number += 1
          @@turn +=1
        end
      end
    end
    printer
  end

  public
  def game
    while @@counter < 1
      modifier
      check_condition
      computer
      check_condition
    end
  end
end
holder = Grid.new("x")
holder.game